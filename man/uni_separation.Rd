% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Univariate_separation.R
\name{uni_separation}
\alias{uni_separation}
\title{Univariate Separation Detection}
\usage{
uni_separation(data, predictor, outcome = "Y")
}
\arguments{
\item{data}{A data frame or tibble.}

\item{predictor}{Name of the predictor column (string).}

\item{outcome}{Name of the binary outcome column (string, default "Y").}
}
\value{
A list with fields:
\itemize{
\item \code{predictor}, \code{outcome}
\item \code{separation_type} ("Perfect separation", "Quasi-complete separation", "No separation problem",
"Constant outcome", "Constant predictor")
\item \code{separation_index} (Rand index)
\item \code{severity_score} in \eqn{[0,1]}
\item \code{rand_details} (list from \code{rand_index})
\item \code{single_tie_boundary} (logical), \code{tie_rows_boundary} (integer)
\item \code{boundary_threshold} (numeric)
\item \code{overlap_prop} (numeric in \link{0,1}, optional)
}
}
\description{
Detects perfect, quasi-complete, or no separation for a binary outcome
against one predictor. Uses Hungarian matching for initial cluster
alignment, a vectorized Rand index, a non-negative boundary threshold,
and a continuous severity score.
}
\details{
The procedure:
\enumerate{
\item Validates inputs; drops rows with missing \code{predictor} or \code{outcome}.
\item Early exits if the outcome or predictor is constant.
\item Optionally computes group overlap via kernel density (\pkg{overlapping}).
\item Builds an initial 2-cluster assignment by sorting \code{predictor},
aligns with \code{outcome} using Hungarian matching
(\code{clue::solve_LSAP}).
\item Computes Rand index and detects boundary single-ties.
\item Applies a non-negative threshold and computes a severity score.
}
}
\section{Edge Cases}{

\itemize{
\item Constant \code{outcome}: returns early with \code{separation_type = "Constant outcome"}.
\item Constant \code{predictor}: returns early with \code{separation_type = "Constant predictor"}.
}
}

\examples{
toy1 <- data.frame(Y = c(0,0,0,0,1,1,1), X = c(1,2,3,4,4,5,6))
toy2 <- data.frame(Y = c(1,1,1,1,0,0,0,0), X = c(1,2,3,4,4,5,6,7))
separation(toy1, "X")
separation(toy2, "X")

}
